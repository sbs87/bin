condition
pairedSamples
cds = newCountDataSet( countTable, condition )
cds = estimateSizeFactors( cds )
sizeFactors( cds )
head( counts( cds, normalized=TRUE ) )
head( counts( cds, normalized=FALSE ) )
head(counts(cds))
head(counts(cds))
library("knitr")
knitr
?knitr
knitr
head( counts( cds, normalized=TRUE ) )
head( counts( cds, normalized=FALSE ) )
head(counts(cds))
cds = estimateDispersions( cds )
str( fitInfo(cds) )
plotDispEsts( cds )
library("DESeq")
datafile =system.file( "extdata/pasilla_gene_counts.tsv", package="pasilla" )
#datafile
pasillaCountTable = read.table( datafile, header=TRUE, row.names=1 )
pasillaDesign = data.frame(
row.names = colnames( pasillaCountTable ),
condition = c( "untreated", "untreated", "untreated",
"untreated", "treated", "treated", "treated" ),
libType = c( "single-end", "single-end", "paired-end",
"paired-end", "single-end", "paired-end", "paired-end" ) )
pasillaDesign
pairedSamples = pasillaDesign$libType == "paired-end"
countTable = pasillaCountTable[ , pairedSamples ]
condition = pasillaDesign$condition[ pairedSamples ]
head(countTable)
cds = newCountDataSet( countTable, condition )
cds = estimateSizeFactors( cds )
sizeFactors( cds )
head( counts( cds, normalized=TRUE ) )
head( counts( cds, normalized=FALSE ) )
cds = estimateDispersions( cds )
str( fitInfo(cds) )
plotDispEsts( cds )
rm(list=ls())
source("http://bioconductor.org/biocLite.R")
source("http://stevenbsmith.net/source/load_R_enviornment_vars.R")
#biocLite("DESeq2")
#biocLite("pasilla")
library("DESeq")
#library("DESeq2")
library("knitr")
datafile =system.file( "extdata/pasilla_gene_counts.tsv", package="pasilla" )
#datafile
pasillaCountTable = read.table( datafile, header=TRUE, row.names=1 )
pasillaDesign = data.frame(
row.names = colnames( pasillaCountTable ),
condition = c( "untreated", "untreated", "untreated",
"untreated", "treated", "treated", "treated" ),
libType = c( "single-end", "single-end", "paired-end",
"paired-end", "single-end", "paired-end", "paired-end" ) )
pasillaDesign
pairedSamples = pasillaDesign$libType == "paired-end"
countTable = pasillaCountTable[ , pairedSamples ]
condition = pasillaDesign$condition[ pairedSamples ]
head(countTable)
cds = newCountDataSet( countTable, condition )
cds = estimateSizeFactors( cds )
sizeFactors( cds )
head( counts( cds, normalized=TRUE ) )
head( counts( cds, normalized=FALSE ) )
cds = estimateDispersions( cds )
str( fitInfo(cds) )
plotDispEsts( cds )
str( fitInfo(cds) )
?plotDispEsts
DESeq::plotDispEsts( cds )
head(fitInfo(cds))
head(counts(cds))
res = nbinomTest( cds, "untreated", "treated" )
plotMA(res)
DESeq::plotMA(res)
condA="untreated"
condB="treated"
colA <- conditions(cds) == condA
colB <- conditions(cds) == condB
rawScvA <- fData(cds)[, paste("disp", dispTable(cds)[condA],
sep = "_")]
rawScvB <- fData(cds)[, paste("disp", dispTable(cds)[condB],
sep = "_")]
countsA=counts(cds)[, colA]
countsB=counts(cds)[, colB]
sizeFactorsA=sizeFactors(cds)[colA]
sizeFactorsB=sizeFactors(cds)[colB]
dispsA=rawScvA
dispsB=rawScvB
kBs <- rowSums(cbind(countsB))
kAs <- rowSums(cbind(countsA))
mus <- rowMeans(cbind(t(t(countsA)/sizeFactorsA), t(t(countsB)/sizeFactorsB)))
fullVarsA <- pmax(mus * sum(sizeFactorsA) + dispsA * mus^2 *sum(sizeFactorsA^2), mus * sum(sizeFactorsA) * (1 + 1e-08))
fullVarsB <- pmax(mus * sum(sizeFactorsB) + dispsB * mus^2 *sum(sizeFactorsB^2), mus * sum(sizeFactorsB) * (1 + 1e-08))
sumDispsA <- (fullVarsA - mus * sum(sizeFactorsA))/(mus *sum(sizeFactorsA))^2
sumDispsB <- (fullVarsB - mus * sum(sizeFactorsB))/(mus *sum(sizeFactorsB))^2
sapply(seq(along = kAs), function(i) {
if (kAs[i] == 0 & kBs[i] == 0)
return(NA)
ks <- 0:(kAs[i] + kBs[i]) #seq from 0 to gene i's total counts
pa <- dnbinom(ks, mu = mus[i] * sum(sizeFactorsA), size = 1/sumDispsA[i]) # my addition
pb <- dnbinom(kAs[i] + kBs[i] - ks, mu = mus[i] * sum(sizeFactorsB), size = 1/sumDispsB[i]) # my addition
#return density for the the range of all possible counts in gene i given q0*sum(s), dispersion parameter (1/alpha), for both conditions. this is p(a..A,b..B)=p(a)*p(b)|all possibilitites
ps <- dnbinom(ks, mu = mus[i] * sum(sizeFactorsA), size = 1/sumDispsA[i]) *
dnbinom(kAs[i] + kBs[i] - ks, mu = mus[i] * sum(sizeFactorsB), size = 1/sumDispsB[i])
plot(ks,ps/sum(ps), col="black")
points(ks,pa/sum(pa),col="red")
points(ks,pb/sum(pb),col="blue")
abline(v=kAs[i],col="red")
abline(v=kBs[i],col="blue")
#return the probably of observing a and b counts under a negative binomial distribution gievn q0*sum(s) and 1/alpha. this is p(a=A,b=B)=p(A)*p(B)
pobs <- dnbinom(kAs[i], mu = mus[i] * sum(sizeFactorsA), size = 1/sumDispsA[i]) *
dnbinom(kBs[i], mu = mus[i] * sum(sizeFactorsB), size = 1/sumDispsB[i])
#If for some reason the observed probably doesn't match the calculated probability wihin the range of probabilites, stop
stopifnot(pobs == ps[kAs[i] + 1])
#Calls numer (numerator?) the range of probabilities less than extreme as the observed count
if (kAs[i] * sum(sizeFactorsB) < kBs[i] * sum(sizeFactorsA)) numer <- ps[1:(kAs[i] + 1)] else numer <- ps[(kAs[i] + 1):length(ps)]
#retuens the smaller value between the two sized sum(all probabilities al as extreme)/(all probabilities) and 1
min(1, 2 * sum(numer)/sum(ps))
kBs[i] /kAs[i]
})
seq(along = kAs)
head( counts( cds, normalized=FALSE ) )
kAs <- rowSums(cbind(countsA))
kBs <- rowSums(cbind(countsB))
#mean of gene counts/size factors (pooled mean, q0 i think)
mus <- rowMeans(cbind(t(t(countsA)/sizeFactorsA), t(t(countsB)/sizeFactorsB)))
#choose the max for each gene between q0*sum(s) + alpha*q^2*s^2 and q0*sum(s)++ (this is variance, and I assume this chooses the max between the NB and poission model)
fullVarsA <- pmax(mus * sum(sizeFactorsA) + dispsA * mus^2 *sum(sizeFactorsA^2), mus * sum(sizeFactorsA) * (1 + 1e-08))
fullVarsB <- pmax(mus * sum(sizeFactorsB) + dispsB * mus^2 *sum(sizeFactorsB^2), mus * sum(sizeFactorsB) * (1 + 1e-08))
#  (v-q0*sum(s))/(q0*sum(s))^2 .. this is alpha.. solved for by using NB variance, means, and s (vinette, pg 4)
sumDispsA <- (fullVarsA - mus * sum(sizeFactorsA))/(mus *sum(sizeFactorsA))^2
sumDispsB <- (fullVarsB - mus * sum(sizeFactorsB))/(mus *sum(sizeFactorsB))^2
#For each of the counts in A
sapply(seq(along = kAs), function(i) {
if (kAs[i] == 0 & kBs[i] == 0)
return(NA)
ks <- 0:(kAs[i] + kBs[i]) #seq from 0 to gene i's total counts
pa <- dnbinom(ks, mu = mus[i] * sum(sizeFactorsA), size = 1/sumDispsA[i]) # my addition
pb <- dnbinom(kAs[i] + kBs[i] - ks, mu = mus[i] * sum(sizeFactorsB), size = 1/sumDispsB[i]) # my addition
#return density for the the range of all possible counts in gene i given q0*sum(s), dispersion parameter (1/alpha), for both conditions. this is p(a..A,b..B)=p(a)*p(b)|all possibilitites
ps <- dnbinom(ks, mu = mus[i] * sum(sizeFactorsA), size = 1/sumDispsA[i]) *
dnbinom(kAs[i] + kBs[i] - ks, mu = mus[i] * sum(sizeFactorsB), size = 1/sumDispsB[i])
#plot(ks,ps/sum(ps), col="black")
#points(ks,pa/sum(pa),col="red")
#points(ks,pb/sum(pb),col="blue")
#abline(v=kAs[i],col="red")
#abline(v=kBs[i],col="blue")
#return the probably of observing a and b counts under a negative binomial distribution gievn q0*sum(s) and 1/alpha. this is p(a=A,b=B)=p(A)*p(B)
pobs <- dnbinom(kAs[i], mu = mus[i] * sum(sizeFactorsA), size = 1/sumDispsA[i]) *
dnbinom(kBs[i], mu = mus[i] * sum(sizeFactorsB), size = 1/sumDispsB[i])
#If for some reason the observed probably doesn't match the calculated probability wihin the range of probabilites, stop
stopifnot(pobs == ps[kAs[i] + 1])
#Calls numer (numerator?) the range of probabilities less than extreme as the observed count
if (kAs[i] * sum(sizeFactorsB) < kBs[i] * sum(sizeFactorsA)) numer <- ps[1:(kAs[i] + 1)] else numer <- ps[(kAs[i] + 1):length(ps)]
#retuens the smaller value between the two sized sum(all probabilities al as extreme)/(all probabilities) and 1
min(1, 2 * sum(numer)/sum(ps))
kBs[i] /kAs[i]
})
DESeq
head(fitInfo(cds))
head(counts(cds))
class(cds)
gene_of_interest<-"FBgn0039155"
counts(cds==gene_of_interest)
featureNames(cds)
featureNames(cds==gene_of_interest)
featureNames(cds)==gene_of_interest
cds[featureNames(cds)==gene_of_interest]
featureNames(cds)[featureNames(cds)==gene_of_interest]
cds[featureNames(cds)==gene_of_interest]
cds
counts(cds)[featureNames(cds)==gene_of_interest]
cds
counts(cds)
counts(cds)[featureNames(cds)==gene_of_interest,]
goi_row_index<-featureNames(cds)==gene_of_interest
counts(cds)[goi_row_index,]
counts(cds,normalized=TRUE)[goi_row_index,]
sizeFactors(cds)
average(741,931)
mean(741,931)
mean(c(741,931))
counts(cds,normalized=TRUE)[goi_row_index,]
counts(cds)[goi_row_index,]
sizeFactors(cds)
741* 0.8730966
counts(cds,normalized=TRUE)[goi_row_index,]
741/0.8730966
counts(cds,normalized=TRUE)[goi_row_index,]
mean(c(741,931))
mean(c(848.70330,921.22473))
mean(c(37.16557,46.65398))
mean(c(37.16557,46.65398))/mean(c(848.70330,921.22473))
res
head(fitInfo(cds))
head(counts(cds))
res
head(res)
74.4355310/78.155755
meanA
meanA<-(mean(c(848.70330,921.22473)))
meanB<-(mean(c(37.16557,46.65398)))
(meanA<-mean(c(848.70330,921.22473)))
(meanB<-mean(c(37.16557,46.65398)))
(fc<-meanB/meanB)
(fc<-meanB/meanA)
(log2fc<-log(fc,base=2))
head(res)
class(res)
res$id==gene_of_interest
res[res$id==gene_of_interest,]
(meanA<-mean(c(848.70330,921.22473)))
(log2fc<-log(fc,base=2))
(meanA<-mean(c(848.70330,921.22473)))
i<-9831
mus[i]
mu_goi<-mean(884.964,41.90977)
mu_goi
mu_goi<-mean(c(884.964,41.90977))
mu_goi
sumDispsA[i]
sumDispsA[i+1]
fullVarsA
mus * sum(sizeFactorsA)
sum(sizeFactorsA)
sizeFactorsA
res[res$id==gene_of_interest,]
disp_goi<-sumDispsA[9831]
alpha_goi<-1/disp_goi
disp_goi
i<-9831
(disp_goi<-sumDispsA[i])
alpha_goi<-1/disp_goi
sizeFactorsA
(pobsA<-dnbinom(kAs[i], mu = mu_goi * sum(sizeFactorsA), size = alpha_goi) )
kAs[i]
(pobsA<-dnbinom(kAs[i], mu = 1600, size = alpha_goi) )
(pobsA<-dnbinom(kAs[i], mu = 1672, size = alpha_goi) )
kAs[i]
alpha_goi
(pobsA<-dnbinom(kAs[i], mu = kAs[i], size = alpha_goi) )
(pobsA<-dnbinom(kAs[i], mu = kAs[i], size = alpha_goi) )
(pobsA<-pnbinom(kAs[i], mu = kAs[i], size = alpha_goi) )
(pobsA<-pnbinom(kAs[i], mu = kAs[i], size = alpha_goi) )
kAs[i]
(dnbinom(kAs[i], mu = kAs[i], size = alpha_goi) )
(pnbinom(kAs[i], mu = kAs[i], size = alpha_goi) )
(pobsA<-dnbinom(kAs[i], mu = mu_goi * sum(sizeFactorsA), size = alpha_goi) )
sumDispsB[i]
(disp_goi<-sumDispsA[i])
(pobsA<-dnbinom(kAs[i], mu = mu_goi * sum(sizeFactorsA), size = 1/sumDispsA[i]) )
(dnbinom(kAs[i], mu = kAs[i], size = 1/sumDispsA[i]) )
## but for probability mass function, the value is very close to 50%
(pnbinom(kAs[i], mu = kAs[i], size = 1/sumDispsA[i]) )
(pobsA<-dnbinom(kAs[i], mu = mu_goi * sum(sizeFactorsA), size = 1/sumDispsB[i]) )
(pobsB<-dnbinom(kBs[i], mu = mu_goi * sum(sizeFactorsB), size = 1/sumDispsB[i]) )
(pobsB<-dnbinom(kBs[i], mu = mu_goi * sum(sizeFactorsB), size = 1/sumDispsB[i]) )
(pobsB<-dnbinom(kBs[i], mu = mu_goi * sum(sizeFactorsB), size = 1/sumDispsB[i]) )
kA
kAs[i]
1:kAs[i] + kBs[i]
dnbiom(1:kAs[i] + kBs[i],size = 1/sumDispsA[i],mu=mu_goi * sum(sizeFactorsA))
dnbinom(1:kAs[i] + kBs[i],size = 1/sumDispsA[i],mu=mu_goi * sum(sizeFactorsA))
nbin_A<-dnbinom(1:kAs[i] + kBs[i],size = 1/sumDispsA[i],mu=mu_goi * sum(sizeFactorsA))
plot(kAs[i] + kBs[i],nbin_A)
nbin_A<-dnbinom(0:kAs[i] + kBs[i],size = 1/sumDispsA[i],mu=mu_goi * sum(sizeFactorsA))
nbin_A
plot(0:kAs[i] + kBs[i],nbin_A)
abline(h=pobsA)
abline(v=kAs[i])
nbin_A_pmf<-pnbinom(0:kAs[i] + kBs[i],size = 1/sumDispsA[i],mu=mu_goi * sum(sizeFactorsA))
plot(0:kAs[i] + kBs[i],nbin_A_pmf)
abline(h=pobsA)
abline(v=kAs[i])
nbin_A<-dnbinom(0:kAs[i] + kBs[i],size = 1/sumDispsA[i],mu=mu_goi * sum(sizeFactorsA))
plot(0:kAs[i] + kBs[i],nbin_A)
nbin_B<-dnbinom(0:kAs[i] + kBs[i],size = 1/sumDispsB[i],mu=mu_goi * sum(sizeFactorsB))
points(0:kAs[i] + kBs[i],nbin_B)
points(0:kAs[i] + kBs[i],nbin_B,col='red')
plot(0:kAs[i] + kBs[i],nbin_A,col='blue')
points(0:kAs[i] + kBs[i],nbin_B,col='red')
abline(h=pobsA,col='blue')
abline(v=kAs[i],col='red')
abline(v=kAs[i],col='blue')
abline(h=pobsB,col='red')
abline(v=kBs[i],col='red')
kBs[i]
kAs[i]
nbin<-dnbinom(0:kAs[i],size = 1/sumDispsA[i],mu=kAs[i] * sum(sizeFactorsA))
plot(kAs[i],nbin)
plot(0:kAs[i],nbin)
nbin<-dnbinom(0:2*kAs[i],size = 1/sumDispsA[i],mu=kAs[i] * sum(sizeFactorsA))
plot(0:2*kAs[i],nbin)
0:2*kAs[i]
0:(2*kAs[i])
nbin<-dnbinom(0:(2*kAs[i]),size = 1/sumDispsA[i],mu=kAs[i] * sum(sizeFactorsA))
plot(0:(2*kAs[i]),nbin)
abline(v=kAs[i],col='blue')
abline(dnbinom(kAs[i],size = 1/sumDispsA[i],mu=kAs[i] * sum(sizeFactorsA)))
abline(v=dnbinom(kAs[i],size = 1/sumDispsA[i],mu=kAs[i] * sum(sizeFactorsA)))
plot(0:(2*kAs[i]),nbin)
abline(v=dnbinom(kAs[i],size = 1/sumDispsA[i],mu=kAs[i] * sum(sizeFactorsA)))
plot(0:(2*kAs[i]),nbin)
abline(h=dnbinom(kAs[i],size = 1/sumDispsA[i],mu=kAs[i] * sum(sizeFactorsA)))
abline(v=kAs[i])
0:(2*kAs[i])
1/sumDispsA[i]
kAs[i] * sum(sizeFactorsA)
kAs[i]
nbin<-dnbinom(0:(2*kAs[i]),size = 1/sumDispsA[i],mu=kAs[i])
plot(0:(2*kAs[i]),nbin)
abline(h=dnbinom(kAs[i],size = 1/sumDispsA[i],mu=kAs[i] * sum(sizeFactorsA)))
abline(v=kAs[i])
abline(h=dnbinom(kAs[i],size = 1/sumDispsA[i],mu=kAs[i])
)
pobsB
p_joint<-pobsA*pobsB
p_joint
res[res$id==gene_of_interest,]
pobsA
pobsB
(p_joint<-pobsA*pobsB)
(pobsA<-dnbinom(kAs[i], mu = mu_goi * sum(sizeFactorsA), size = 1/sumDispsA[i]) )
(pobsB<-dnbinom(kBs[i], mu = mu_goi * sum(sizeFactorsB), size = 1/sumDispsB[i]) )
dnbinom(kAs[i], mu = mus[i] * sum(sizeFactorsA), size = 1/sumDispsA[i]) *
dnbinom(kBs[i], mu = mus[i] * sum(sizeFactorsB), size = 1/sumDispsB[i])
(p_joint<-pobsA*pobsB)
dnbinom(ks, mu = mus[i] * sum(sizeFactorsA), size = 1/sumDispsA[i]) *
dnbinom(kAs[i] + kBs[i] - ks, mu = mus[i] * sum(sizeFactorsB), size = 1/sumDispsB[i])
(0:(kAs[i] + kBs[i]))
(kAs[i] + kBs[i]) - (0:(kAs[i] + kBs[i])
)
dnbinom(ks, mu = mus[i] * sum(sizeFactorsA), size = 1/sumDispsA[i])
ps <- dnbinom((0:(kAs[i] + kBs[i])), mu = mus[i] * sum(sizeFactorsA), size = 1/sumDispsA[i]) *
dnbinom((kAs[i] + kBs[i]) - (0:(kAs[i] + kBs[i])), mu = mus[i] * sum(sizeFactorsB), size = 1/sumDispsB[i])
ps
ps
plot(0:(kAs[i] + kBs[i]),p_joint)
0:(kAs[i] + kBs[i])
plot(0:(kAs[i] + kBs[i]),ps)
abline(v=ps)
abline(h=ps)
plot(0:(kAs[i] + kBs[i]),ps)
abline(h=p_joint)
abline(h=p_joint,'red')
abline(h=p_joint,col='red')
if (kAs[i] * sum(sizeFactorsB) < kBs[i] * sum(sizeFactorsA)) numer <- ps[1:(kAs[i] + 1)] else numer <- ps[(kAs[i] + 1):length(ps)]
min(1, 2 * sum(numer)/sum(ps))
kBs[i] /kAs[i]
kAs[i] * sum(sizeFactorsB)
rm(list=ls())
source("http://bioconductor.org/biocLite.R")
source("http://stevenbsmith.net/source/load_R_enviornment_vars.R")
library(baySeq)
install.packages("baySeq")
biocLite("baySeq")
library(baySeq)
library(snow)
install.packages("snow")
library(snow)
cl <- makeCluster(4, "SOCK")
data(simData)
simData[1:10,] ## as per vinette. The data are simulated such that the first hundred counts show differential expression between the first five libraries and the second five libraries
replicates <- c("simA", "simA", "simA", "simA", "simA","simB", "simB", "simB", "simB", "simB")
groups <- list(NDE = c(1,1,1,1,1,1,1,1,1,1),DE = c(1,1,1,1,1,2,2,2,2,2))
baySeq
groups
CD <- new("countData",data=simData, replicates=replicates, groups=groups)
CD
libsizes(CD) <-getLibsizes(CD)
libsizes(CD)
getLibsizes
(libsizes(CD) <-getLibsizes(CD))
CD
getLibsizes(CD)
plotMA.CD(CD, samplesA = "simA", samplesB = "simB",col = c(rep("red", 100), rep("black", 900)))
cl
CD <- getPriors.B(CD,samplesize=1000,estimation="QL",cl=cl)
CD <- getPriors.NB(CD,samplesize=1000,estimation="QL",cl=cl)
getPriors.NB
CD
CD@priors
head(CD@priors)
CD@annotation <- data.frame(name=paste("count",1:1000,sep="_"))
head(CD@priors)
CD@priors$priors
CD@priors$sampled
getLikelihoods.NB
cl
CD <-getLikelihoods.NB(CD, pET='BIC',cl=cl)
CD@estProps
CD@posteriors[1:10,]
CD@posteriors[101:110,]
topCounts(CD,group="DE")
topCounts
topCounts(CD,group="DE")
plotPosteriors(CD, group="DE",col=c(rep("red",100),rep("black",900)))
if(!is.null(cl)) stopCluster(cl)
data(pairData)
pairData[,1:4]
pairCD <- new("pairedData", data = pairData[,1:4], pairData = pairData[,5:8],replicates = c(1,1,2,2),groups = list(NDE = c(1,1,1,1), DE = c(1,1,2,2)))
```
pairCD <- new("pairedData", data = pairData[,1:4], pairData = pairData[,5:8],
+ replicates = c(1,1,2,2),
pairCD <- new("pairedData", data = pairData[,1:4], pairData = pairData[,5:8],replicates = c(1,1,2,2),groups = list(NDE = c(1,1,1,1), DE = c(1,1,2,2)))
```
libsizes(pairCD) <- getLibsizes(pairCD)
(libsizes(pairCD) <- getLibsizes(pairCD))
cl
pairCD <- getPriors.BB(pairCD, samplesize = 1000, cl = cl)
if(!is.null(cl)) stopCluster(cl)
cl <- makeCluster(4, "SOCK")
pairCD <- getPriors.BB(pairCD, samplesize = 1000, cl = cl)
pairCD <- getLikelihoods.BB(pairCD, pET = 'BIC', nullProps = 0.5, cl = cl)
topCounts(pairCD, group = 2)
topCounts(pairCD, group = 1)
edgeRUsersGuide()
rm(list=ls())
source("http://bioconductor.org/biocLite.R")
source("http://stevenbsmith.net/source/load_R_enviornment_vars.R")
library(baySeq)
edgeRUsersGuide()
rm(list=ls())
source("http://bioconductor.org/biocLite.R")
source("http://stevenbsmith.net/source/load_R_enviornment_vars.R")
#biocLite("edgeR")
library("edgeR")
edgeRUsersGuide()
estimateCommonDisp
estimateCommonDisp
estimateCommonDisp
estimateCommonDisp
commonCondLogLikDerDelta
condLogLikDerDelta
condLogLikDerSize
estimateCommonDisp
commonCondLogLikDerDelta
condLogLikDerDelta
condLogLikDerSize
?optimize
estimateCommonDisp
?estimateCommonDisp
commonCondLogLikDerDelta
?commonCondLogLikDerDelta
?condLogLikDerDelta
?chisq.test
matrix(c(110,115,44,70),nrow=2)
chisq.test(matrix(c(110,115,44,70),nrow=2))
matrix(c(110,44,115,70),nrow=2)
chisq.test(matrix(c(110,44,115,70),nrow=2))
chisq.test(x=c(110,44),y=c(110,70))
chisq.test(x=c(110,44),y=c(115,70))
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("M","F"),
party = c("Democrat","Independent", "Republican"))
(Xsq <- chisq.test(M))  # Prints test summary
M
M <- as.table(rbind(c(110, 115), c(44, 70)))
dimnames(M) <- list(gender = c("White","Nonwhite"),
party = c("Normal","BV"))
M
(Xsq <- chisq.test(M))  # Prints test summary
chisq.test(x=c(110,44),y=c(115,70),correct = FALSE)
(Xsq <- chisq.test(M,correct = F))  # Prints test summary
chisq.test(matrix(c(110, 115,44, 70),nrow=2),correct = F)
matrix(c(110, 115,44, 70),nrow=2)
matrix(c(110,44, 115,70),nrow=2)
test<-matrix(c(110,44, 115,70),nrow=2)
chisq.test(test,correct = F)
test<-matrix(c(49,68,132,131),nrow=2)
chisq.test(test,correct = F)
data.frame(years=c(5,6,6,rep(7,times=9)))
data.frame(years=c(5,6,6,rep(8,times=9),rep(9,times=27),rep(10,70)))
hist(data.frame(years=c(5,6,6,rep(8,times=9),rep(9,times=27),rep(10,70))))
age<-hist(data.frame(years=c(5,6,6,rep(8,times=9),rep(9,times=27),rep(10,70))))
age<-data.frame(years=c(5,6,6,rep(8,times=9),rep(9,times=27),rep(10,70)))
library("ggplot2")
library("ggplot")
library(ggplot2)
package(ggplot2)
age<-matrixc(5,6,6,rep(8,times=9),rep(9,times=27),rep(10,70)))
age<-matrix(c(5,6,6,rep(8,times=9),rep(9,times=27),rep(10,70)))
age
hist(age)
?chisq.test
chisq.test(matrix(c(286,264,222,220),ncol=2))
chisq.test(matrix(c(286,264,222,220),ncol=2),correct=F)
chisq.test(matrix(c(138,131,110,102,165,140,95,111),ncol=2),correct=F)
matrix(c(138,131,110,102,165,140,95,111),ncol=2)
chisq.test(matrix(c(138,110,165,95,131,102,140,111),ncol=2),correct=F)
chisq.test(matrix(c(140,7),ncol=2),correct=F)
chisq.test(matrix(c(508-140,140,484-7,7),ncol=2),correct=F)
matrix(c(508-140,140,484-7,7),ncol=2)
7/992
install.packages("antiProfilesData")
setwd("/Users/stevensmith/bin/Qualifiers/Committee_Projects")
require(antiProfilesData)
%\VignetteEngine{knitr::knitr}
expDir="~/barcode/exps/succs/rafaSuccs"
load(file.path(expDir,"rdas/gpl570.rda"))
file.path(expDir,"rdas/gpl570.rda")
read.table("/Users/stevensmith/Documents/out.hist")
hist<-read.table("/Users/stevensmith/Documents/out.hist")
plot(hist$V1,hist$V2)
bar(hist$V1,hist$V2)
barplot(hist$V1,hist$V2)
